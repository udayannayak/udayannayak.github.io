{"version":3,"sources":["components/site-header/SiteHeader.tsx","components/load-icon/LoadIcon.tsx","components/login/Login.tsx","components/search/Search.tsx","components/planet-information/PlanetInformation.tsx","components/planet-details/PlanetDetails.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["SiteHeader","button","this","props","isUserLoggedIn","className","to","companyTitle","React","Component","LoadingIcon","isLoading","Login","state","userName","password","isLoginSuccess","logginUser","handleUsernameChange","bind","handlePasswordChange","handleSubmit","event","setState","target","value","fetch","apiBaseURL","then","res","json","result","count","alert","results","birth_year","error","preventDefault","onSubmit","required","placeholder","type","onChange","Search","query","planetList","filteredPlanetList","handleInputChange","handlePlanetClick","forEach","item","width","population","filter","a","name","toLowerCase","indexOf","planet","selectedPlanet","map","key","onClick","role","aria-valuenow","aria-valuemin","aria-valuemax","style","PlanetInformation","diameter","climate","PlanetDetails","handlePlanetSelection","AppComponent","handleUserLogIn","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.74d70149.chunk.js","sourcesContent":["import React from 'react';\r\nimport './SiteHeader.css';\r\nimport { Link } from 'react-router-dom';\r\n\r\ntype MyProps = {\r\n    companyTitle: string;\r\n    isUserLoggedIn: boolean\r\n}\r\ntype MyState = {};\r\n\r\nexport class SiteHeader extends React.Component<MyProps, MyState> {\r\n\r\n    render() {\r\n        let button = null;\r\n        if (this.props.isUserLoggedIn) {\r\n            button = <Link className=\"nav-link\" to=\"/\">Logout</Link>;\r\n        }\r\n\r\n        return <nav className=\"navbar navbar-inverse\">\r\n            <div className=\"container-fluid\">\r\n                <div className=\"navbar-header\">\r\n                    <span className=\"navbar-brand\">{this.props.companyTitle}</span>\r\n                </div>\r\n                <ul className=\"nav navbar-nav navbar-right\">\r\n                    <li>{button}</li>\r\n                </ul>\r\n            </div>\r\n        </nav>\r\n    }\r\n}","import React from 'react';\r\nimport './LoadIcon.css';\r\n\r\ntype MyProps = { isLoading: boolean };\r\ntype MyState = {};\r\n\r\nexport class LoadingIcon extends React.Component<MyProps, MyState> {\r\n    render() {\r\n        if (this.props.isLoading) {\r\n            return <div className=\"text-center\">\r\n                <div className=\"lds-facebook\"><div></div><div></div><div></div></div>\r\n            </div>\r\n        }\r\n        else {\r\n            return null\r\n        }\r\n    }\r\n}","import React from 'react';\r\nimport { apiBaseURL } from '../../constant';\r\nimport { LoadingIcon } from '../load-icon/LoadIcon';\r\nimport { Redirect } from 'react-router';\r\n\r\ntype MyProps = { logginUser:any };\r\ntype MyState = { userName: string, password: string, isLoading: boolean, isLoginSuccess: boolean };\r\n\r\nexport class Login extends React.Component<MyProps, MyState> {\r\n\r\n    constructor(props: MyProps) {\r\n        super(props);\r\n        this.state = {\r\n            userName: '',\r\n            password: '',\r\n            isLoading: false,\r\n            isLoginSuccess: false\r\n        };\r\n\r\n        this.props.logginUser(false);\r\n\r\n        this.handleUsernameChange = this.handleUsernameChange.bind(this);\r\n        this.handlePasswordChange = this.handlePasswordChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleUsernameChange(event: any) {\r\n        this.setState({ userName: event.target.value as string });\r\n    }\r\n\r\n    handlePasswordChange(event: any) {\r\n        this.setState({ password: event.target.value as string });\r\n    }\r\n\r\n    handleSubmit(event: any) {\r\n        this.setState({ isLoading: true });\r\n        fetch(apiBaseURL + 'people/?search=' + this.state.userName)\r\n            .then(res => res.json())\r\n            .then(\r\n                (result) => {\r\n                    if (result.count === 0) {\r\n                        alert('Login Failed');\r\n                    } else {\r\n                        if (result.results[0].birth_year === this.state.password) {\r\n                            this.props.logginUser(true);\r\n                            this.setState({ isLoginSuccess: true });\r\n                        } else {\r\n                            alert('Login Failed');\r\n                        }\r\n                    }\r\n                    this.setState({ isLoading: false });\r\n                },\r\n                (error) => {\r\n                    this.setState({ isLoading: false });\r\n                }\r\n            )\r\n        event.preventDefault();\r\n    }\r\n\r\n    render() {\r\n        if (this.state.isLoginSuccess === true) {\r\n            return <Redirect to='/planet-details' />\r\n        } else {\r\n            return (\r\n                <div className=\"container\">\r\n                    <h2>Please enter login details!</h2>\r\n                    <form onSubmit={this.handleSubmit}>\r\n                        <div className=\"form-group\">\r\n                            <label>UserName:</label>\r\n                            <input required placeholder=\"Username\" className=\"form-control\" type=\"text\" value={this.state.userName} onChange={this.handleUsernameChange} />\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label>Password:</label>\r\n                            <input required placeholder=\"Password\" className=\"form-control\" type=\"password\" value={this.state.password} onChange={this.handlePasswordChange} />\r\n                        </div>\r\n                        <input type=\"submit\" value=\"Submit\" className=\"btn btn-default\" />\r\n                    </form>\r\n                    <LoadingIcon isLoading={this.state.isLoading}></LoadingIcon>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}","import React from 'react';\r\nimport { apiBaseURL } from '../../constant';\r\nimport './Search.css';\r\nimport { LoadingIcon } from '../load-icon/LoadIcon';\r\n\r\ntype MyProps = {selectedPlanet: any};\r\ntype MyState = { query: string, planetList: any[], filteredPlanetList: any[], isLoading: boolean};\r\n\r\n\r\nexport class Search extends React.Component<MyProps, MyState> {\r\n\r\n    constructor(props: MyProps) {\r\n        super(props);\r\n        this.state = {\r\n            query: '',\r\n            planetList: [],\r\n            filteredPlanetList: [],\r\n            isLoading: false\r\n        };\r\n\r\n        this.handleInputChange = this.handleInputChange.bind(this);\r\n        this.handlePlanetClick = this.handlePlanetClick.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({ isLoading: true });\r\n        fetch(apiBaseURL + 'planets/')\r\n            .then(res => res.json())\r\n            .then(\r\n                (result) => {\r\n                    result.results.forEach((item:any) => {\r\n                        item.width = (item.population === 'unknown' ? 0 : item.population)/10000000 + 'px';\r\n                    });\r\n                    this.setState({\r\n                        planetList: result.results,\r\n                        isLoading: false\r\n                    });\r\n                },\r\n                (error) => {\r\n                    this.setState({ isLoading: false });\r\n                }\r\n            )\r\n    }\r\n\r\n    handleInputChange(event: any) {\r\n        this.setState({ query: event.target.value as string });\r\n        if (event.target.value) {\r\n            this.setState({ filteredPlanetList: this.state.planetList.filter(a => a.name.toLowerCase().indexOf(event.target.value.toLowerCase()) > -1) });\r\n        }\r\n    }\r\n\r\n    handlePlanetClick(planet: any) {\r\n        this.props.selectedPlanet(planet); \r\n        this.setState({ filteredPlanetList: [], query: planet.name});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form>\r\n                <LoadingIcon isLoading={this.state.isLoading}></LoadingIcon>\r\n                <div className=\"row\">\r\n                    <div className=\"col-sm-6\">\r\n                        <input placeholder=\"Search Planet\" className=\"form-control\" type=\"text\" value={this.state.query} onChange={this.handleInputChange} />\r\n                    </div>\r\n                </div>\r\n\r\n                {this.state.filteredPlanetList.map((item) => (\r\n                    <div key={item.name}>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-sm-6 pointer\" onClick={() => this.handlePlanetClick(item)}>\r\n                                {item.name} - {item.population}\r\n                                <div className=\"progress\">\r\n                                    <div className=\"progress-bar\" role=\"progressbar\" aria-valuenow={item.population} aria-valuemin={0} aria-valuemax={100} style={{width : item.width}}>\r\n                                        <span className=\"sr-only\">70% Complete</span>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n            </form>\r\n        )\r\n    }\r\n}","import React from 'react';\r\n\r\ntype MyProps = { selectedPlanet: any };\r\ntype MyState = {};\r\n\r\nexport class PlanetInformation extends React.Component<MyProps, MyState> {\r\n    render() {\r\n        return <div>\r\n            <h3>Planet Information</h3>\r\n            <div className=\"row\">\r\n                <div className=\"col-sm-2\">Name:</div>\r\n                <div className=\"col-sm-2\">{this.props.selectedPlanet.name}</div>\r\n            </div>\r\n            <div className=\"row\">\r\n                <div className=\"col-sm-2\">Population:</div>\r\n                <div className=\"col-sm-2\">{this.props.selectedPlanet.population}</div>\r\n            </div>\r\n            <div className=\"row\">\r\n                <div className=\"col-sm-2\">Diameter:</div>\r\n                <div className=\"col-sm-2\">{this.props.selectedPlanet.diameter}</div>\r\n            </div>\r\n            <div className=\"row\">\r\n                <div className=\"col-sm-2\">Climate:</div>\r\n                <div className=\"col-sm-2\">{this.props.selectedPlanet.climate}</div>\r\n            </div>\r\n        </div>\r\n    }\r\n}","import React from 'react';\r\nimport { Search } from '../search/Search';\r\nimport { PlanetInformation } from '../planet-information/PlanetInformation';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\ntype MyProps = {isLoginSuccess: boolean};\r\ntype MyState = { selectedPlanet: any };\r\n\r\nexport class PlanetDetails extends React.Component<MyProps, MyState> {\r\n    constructor(props: MyProps) {\r\n        super(props);\r\n        this.state = {\r\n            selectedPlanet: {}\r\n        };\r\n\r\n        this.handlePlanetSelection = this.handlePlanetSelection.bind(this);\r\n    }\r\n\r\n    handlePlanetSelection(planet: any) {\r\n        this.setState({ selectedPlanet: planet });\r\n    }\r\n\r\n    render() {\r\n        if (this.props.isLoginSuccess === false) {\r\n            return <Redirect to='/' />\r\n        } else {\r\n            return <div className=\"container\">\r\n            <h2>Planet Details</h2>\r\n            <Search selectedPlanet={this.handlePlanetSelection}></Search>\r\n            <br/><br/>\r\n            {this.state.selectedPlanet && this.state.selectedPlanet.name ? <PlanetInformation selectedPlanet={this.state.selectedPlanet}/> : null}\r\n\r\n        </div>\r\n        }\r\n        \r\n    }\r\n}","import React from 'react';\nimport './App.css';\nimport { SiteHeader } from './components/site-header/SiteHeader';\nimport { Login } from './components/login/Login';\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { PlanetDetails } from './components/planet-details/PlanetDetails';\n\ntype MyProps = {};\ntype MyState = { isUserLoggedIn: boolean };\n\nexport class AppComponent extends React.Component<MyProps, MyState> {\n\n  constructor(props: MyProps) {\n    super(props);\n\n    this.state = {\n      isUserLoggedIn: false\n    }\n\n    this.handleUserLogIn = this.handleUserLogIn.bind(this);\n  }\n\n  handleUserLogIn(isUserLoggedIn: boolean) {\n    this.setState({ isUserLoggedIn: isUserLoggedIn });\n  }\n\n  render() {\n    return <div className=\"App\">\n      <Router>\n        <SiteHeader companyTitle=\"Star Wars\" isUserLoggedIn={this.state.isUserLoggedIn}></SiteHeader>\n        <Switch>\n          <Route exact path=\"/\">\n            <Login logginUser={this.handleUserLogIn}></Login>\n          </Route>\n          <Route path=\"/planet-details\">\n            <PlanetDetails isLoginSuccess={this.state.isUserLoggedIn}></PlanetDetails>\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {AppComponent} from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<AppComponent />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}